{"version":3,"sources":["app.module.js","main.js","directives.js","words.service.js"],"names":[],"mappingsfile":"app.js","sourcesContent":["/* \n File     : app.module.js\n Date     : Sep 24, 2016\n Author   : Jaymes Young <jaymes@phoenixjaymes.com>\n */\n\nangular.module('wordGenerator', []);","/* \n * File : main.js\n * Date : 12 Sep 16\n * Name : Jaymes Young\n */\n\nangular.module('wordGenerator')\n    .controller('mainCtrl', function($scope, $sce, wordList) {\n      $scope.wordsType = '';\n      $scope.untrustedWords;\n      $scope.trustedWords;\n      $scope.msgQty = \"Max words is 400\";\n      $scope.wordLimit = \"Max words is 400\";\n      $scope.sentenceLimit = \"Max sentences is 100\";\n      $scope.paragraphLimit = \"Max paragraphs is 15\";\n      \n      \n      // Get text to use\n      $scope.getWords = function(type) {\n        \n        if (type === 'meat') {\n          wordList.getMeatWords(function(response) {\n            $scope.untrustedWords = response.data;\n          });\n        } else if (type === 'doctor') {\n          wordList.getDoctorWords(function(response) {\n            $scope.untrustedWords = response.data;\n          });\n        } else if (type === 'german') {\n          wordList.getGermanWords(function(response) {\n            $scope.untrustedWords = response.data;\n          });\n        }   \n      };\n      \n      \n      // Fisher–Yates Shuffle\n      $scope.shuffle = function (array) {\n        var m = array.length, t, i;\n\n        // While there remain elements to shuffle…\n        while (m) {\n\n          // Pick a remaining element…\n          i = Math.floor(Math.random() * m--);\n\n          // And swap it with the current element.\n          t = array[m];\n          array[m] = array[i];\n          array[i] = t;\n        }\n\n        return array;\n      };\n      \n      \n      // Make words array\n      $scope.getWordsArray = function() {\n        var output = $scope.untrustedWords.split(' ');\n        // remove periods ?\n        // make words lower case ?\n        \n        return output;\n      };\n\n\n      // Make sentences array\n      $scope.getSentencesArray = function() {\n        var words = $scope.untrustedWords;\n        var posEndSlice;\n        var sentences = [];\n        \n        // Loop while there are words\n        while (words.length !== 0) {\n          var indexes = [];\n          indexes.push(words.indexOf('.'));\n          indexes.push(words.indexOf('!'));\n          indexes.push(words.indexOf('?'));\n          indexes.sort(function(a, b) {return a-b;});\n          \n          // Loop through indexes and get the lowest number\n          for (var j = 0; j < indexes.length; j++) {\n            if (indexes[j] !== -1) {\n              posEndSlice = indexes[j];\n              break;\n            } else {\n              posEndSlice = indexes[j];\n            }\n          }\n          \n          // Break while loop if there is no (.!?)\n          if(posEndSlice === -1) {\n            break;\n          }\n          \n          // Add sentence to sentences array\n          sentences.push(words.slice(0, posEndSlice + 1));\n          \n          // Create new words string minus the sentence that was just removed.\n          words = words.substr(posEndSlice + 1).trim();\n          \n        }\n        return sentences;\n      };\n      \n      \n      // Increase the number of words until grater than quantity\n      $scope.increaseWords = function(arrWords, qty) {\n        // Double amount of words\n        arrWords = arrWords.concat(arrWords);\n        \n        while(arrWords.length < qty) {\n          // Increase words again if needed\n          arrWords = $scope.increaseWords(arrWords, qty);\n        }\n        \n        return arrWords;\n      };\n      \n      \n      // Make list of words\n      $scope.makeWords = function(qty) {\n        var output ='';\n        var outputMsg = '';\n        var words = $scope.getWordsArray();\n        \n        // Max number of words is 400\n        if (qty > 400) {\n          qty = 400;\n          outputMsg += '<p class=\"error\">Your tried to go over the limit, shame on you</p>';\n        }\n        \n        // Check is qty is larger than number of words, double if needed.\n        if(words.length < qty) {\n          words = $scope.increaseWords(words, qty);\n        }\n        \n        // Shuffle words\n        var shuffledWords = $scope.shuffle(words);\n        \n        for (var i = 0; i < qty; i++) {\n          output += shuffledWords[i] + ' ';\n        }\n        \n        return '<p>' + output.trim() + '</p>' + outputMsg;\n      };\n      \n      \n      // Make sentences\n      $scope.makeSentences = function(qty) {\n        var output = '';\n        var outputMsg = '';\n        var sentences = $scope.getSentencesArray();\n        \n        // Max number of sentences is 100\n        if (qty > 100) {\n          qty = 100;\n          outputMsg += '<p class=\"error\">Your tried to go over the limit, shame on you</p>';\n        }\n        \n        // Check is qty is larger than number of words, double if needed.\n        if(sentences.length < qty) {\n          sentences = $scope.increaseWords(sentences, qty);\n        }\n        \n        // Shuffle sentences\n        var shuffledSentences = $scope.shuffle(sentences);\n        \n        // Loop and add sentence to the array\n        for (var i = 0; i < qty; i++) {\n          output += shuffledSentences[i] + ' ';\n        }\n        \n        return output + outputMsg;\n      };\n      \n      \n      // Make paragraphs\n      $scope.makeParagraphs = function(qty) {\n        var output = '';\n        var outputMsg = '';\n        \n        // Max number of paragraphs is 15\n        if (qty > 15) {\n          qty = 15;\n          outputMsg += '<p class=\"error\">Your tried to go over the limit, shame on you</p>';\n        }\n        \n        for (var i = 0; i < qty; i++) {\n          output += '<p>' + $scope.makeSentences(7) + '</p>';\n        }\n        \n        return output + outputMsg;\n      };\n      \n      // Make words trusted\n      $scope.makeTrusted = function(words) {\n        var output = $sce.trustAsHtml(words);\n        return output;\n      };\n      \n  \n      // Get words\n      $scope.$on('outputWords', function(evt, args) {\n        \n        if(args.type === 'words') {\n          var words = $scope.makeWords(args.qty);\n          $scope.trustedWords = $scope.makeTrusted(words);\n        } else if (args.type === 'sentences') {\n          var words = '<p>' + $scope.makeSentences(args.qty) + '</p>';\n          $scope.trustedWords = $scope.makeTrusted(words);\n        } else if (args.type === 'paragraphs') {\n          var words = $scope.makeParagraphs(args.qty);\n          $scope.trustedWords = $scope.makeTrusted(words);\n        } else {\n          console.log('Missing type value');\n        }\n        \n      });\n\n});\n","/* \n File     : directives.js\n Date     : Sep 24, 2016\n Author   : Jaymes Young <jaymes@phoenixjaymes.com>\n */\n\nangular.module('wordGenerator')\n    .directive('home', function() {\n      return {\n        templateUrl : 'app/views/home.html'\n      };\n    })\n    .directive('meat', function() {\n      return {\n        templateUrl : 'app/views/meat.html'\n      };\n    })\n    .directive('doctor', function() {\n      return {\n        templateUrl : 'app/views/doctor.html'\n      };\n    })\n    .directive('german', function() {\n      return {\n        templateUrl : 'app/views/german.html'\n      };\n    });","/*\nFilename  : words.service.js\nDate      : 12 Aug 16\nProgrammer: Jaymes Young-Liebgott\n*/\n\nangular.module('wordGenerator')\n    .service('wordList', function($http) {\n      // Meat wordlist\n      this.getMeatWords = function(callback) {\n        $http.get('mock/meat.html').then(callback);\n      };\n        \n      // Doctor Who word list\n      this.getDoctorWords = function(callback) {\n        $http.get('mock/doctor.html').then(callback);\n      };\n      \n      // German word list\n      this.getGermanWords = function(callback) {\n        $http.get('mock/german.html').then(callback);\n      };\n});\n"],"sourceRoot":"/source/"}